/*************************************************************************
	svgalib.c -- last change: 19-11-2000

	Copyright (C) 1996-2007  Boris Nagels

	This file is part of SVGAgui.

	SVGAgui is free software; you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation; either version 2 of the License, or
	(at your option) any later version.
	
	SVGAgui is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with SVGAgui; if not, write to the Free Software
	Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

 *************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifdef _USE_VGALIB
#include <vga.h>
#include <vgagl.h>
#include <vgamouse.h>
#endif

#include "local.h"

static char savechar = '\0';


void update_svga_screen(void)
{
	int length, line;
	char *p;
	
	p = guiscreen.data + guiscreen.x_min + guiscreen.y_min * guiscreen.width;
	length = guiscreen.x_max - guiscreen.x_min + 1;
	for (line = 0; line < guiscreen.y_max - guiscreen.y_min + 1;line++) {
		vga_drawscansegment(p, guiscreen.x_min, guiscreen.y_min + line, length);
		p += guiscreen.width;
	}
}


void init_svga_mouse()
{
	if (mouse_init("/dev/mouse", vga_getmousetype(), MOUSE_DEFAULTSAMPLERATE))
		error("Could not initialize mouse.");

	mouse_setdefaulteventhandler();
	mouse_setxrange(0, guiscreen.width - 1);
	mouse_setyrange(0, guiscreen.height - 1);
	mouse_setposition(guiscreen.width / 2, guiscreen.height / 2);

	mouse.x = mouse_getx();
	mouse.y = mouse_gety();
}


void get_svga_mouse_position(void)
{
	mouse.x = mouse_getx();
	mouse.y = mouse_gety();
}


void set_svga_mouse_position(int x, int y)
{
	mouse_setposition(x, y);
}


int get_svga_message(void)
{
	if (mouse_update())
		return GuiMouseEvent;
	if ((savechar = vga_getkey()))
		return GuiKeyboardEvent;
	
	return FALSE;
}


int get_svga_mouse_button(void)
{
	int status = 0;
	
	status = mouse_getbutton();
	if (status & MOUSE_LEFTBUTTON) {
		if (status & MOUSE_RIGHTBUTTON)
			return GuiMouseMiddleButton;
		else
			return GuiMouseLeftButton;
	}
	if (status == MOUSE_MIDDLEBUTTON)
		return GuiMouseMiddleButton;
	if (status == MOUSE_RIGHTBUTTON)
		return GuiMouseRightButton;
		
	return FALSE;
}


char get_svga_keyboard_char(void)
{
	return savechar;
}


void save_svga_screen_to_xpm(void)
{
	FILE *fd;
	int x, y, i, count, r, g, b, nr_colors;
	int color[256];

	/* determine the number of colors used */
	nr_colors = 0;
	for (i = 0; i < guiscreen.width * guiscreen.height; i++) {
		count = 0;
		while (color[count] != guiscreen.data[i] && count < nr_colors)
			count++;
		if (count == nr_colors) {	/* color not found */
			nr_colors++;
			color[nr_colors] = guiscreen.data[i];
		}
	}

	fd = fopen("screen.xpm", "w");
	if (fd == NULL)
		error("Cannot open screen.xpm for writing in save_screen_to_xpm().");

	fprintf(fd, "/* XPM */\n");
	fprintf(fd, "static char * screen_xpm[] = {\n");
	fprintf(fd, "\"%d %d %d 1\",\n", guiscreen.width, guiscreen.height, nr_colors);
	for (i = 0; i < nr_colors; i++) {
		gl_getpalettecolor(color[i], &r, &g, &b);
		r = (int) (r / 64.0 * 255);
		g = (int) (g / 64.0 * 255);
		b = (int) (b / 64.0 * 255);
		fprintf(fd, "\"%c   c #%02x%02x%02x\",\n", i + 65, r, g, b);
	}

	for (y = 0; y < guiscreen.height; y++) {
		fprintf(fd, "\"");
		for (x = 0; x < guiscreen.width; x++) {
			i = 0;
			while (guiscreen.data[x + guiscreen.width * y] != color[i])
				i++;
			fprintf(fd, "%c", i + 65);
		}
		fprintf(fd, "\",\n");
	}

	fclose(fd);
}


static void define_256_colors(void)
{
	BLACK = 1;
	DARKGREY = 2;
	GREY = 3;
	LIGHTGREY = 4;
	WHITE = 5;
	DARKRED = 6;
	RED = 7;
	DARKBLUE = 8;
	BLUE = 9;
	LIGHTBLUE = 10;
	DARKGREEN = 11;
	GREEN = 12;
	DARKYELLOW = 13;
	YELLOW = 14;

	BACKGROUND = 0;
	WIN_BACK = 20;
	TITLE_BACK = 21;
	TITLE_FORE = 22;
	ACTIVE_TITLE_BACK = 23;
	ACTIVE_TITLE_FORE = 24;
	BUTTON_BACK = 25;
	BUTTON_FORE = 26;
	SLIDER_BACK = 27;
	SLIDER_FORE = 28;
	TEXT_EMBOSS = 29;
	TEXT_NORMAL = 30;
	TEXT_HIGHLIGHT = 31;
	INPUT_BACK = 32;
	INPUT_FORE = 33;
	ACTIVE_INPUT_BACK = 34;
	BROWSER_BACK = 35;
	BROWSER_FORE = 36;
	INFO_BACK = 37;
	INFO_FORE = 38;
	LISTBOX_BACK = 39;
	LISTBOX_FORE = 40;
	CHOICE_BACK = 41;
	CHOICE_FORE = 42;
	NUMBER_FORE = 43;
}


static void define_16_colors(void)
{
	/* Define the extra colors */
	BLACK = 1;
	DARKGREY = 2;
	GREY = 3;
	LIGHTGREY = 4;
	WHITE = 5;
	DARKRED = 6;
	RED = 6;
	DARKBLUE = 7;
	BLUE = 7;
	LIGHTBLUE = 8;
	DARKGREEN = 9;
	GREEN = 10;
	DARKYELLOW = 11;
	YELLOW = 11;

	/* redefine the colorscheme */
	BACKGROUND = 0;
	WIN_BACK = 12;
	TITLE_BACK = DARKGREY;
	TITLE_FORE = GREY;
	ACTIVE_TITLE_BACK = BLUE;
	ACTIVE_TITLE_FORE = WHITE;
	BUTTON_BACK = GREY;
	BUTTON_FORE = BLACK;
	SLIDER_BACK = LIGHTGREY;
	SLIDER_FORE = LIGHTGREY;
	TEXT_EMBOSS = DARKGREY;
	TEXT_NORMAL = BLACK;
	INPUT_BACK = GREY;
	INPUT_FORE = BLACK;
	ACTIVE_INPUT_BACK = LIGHTGREY;
	BROWSER_BACK = WHITE;
	BROWSER_FORE = BLACK;
	INFO_BACK = 13;
	INFO_FORE = BLACK;
	CHOICE_BACK = WHITE;
	CHOICE_FORE = BLACK;
	LISTBOX_BACK = WHITE;
	LISTBOX_FORE = BLACK;
	NUMBER_FORE = 14;
}


void set_svga_default_palette(int colors)
{
	if (colors > 16) {
		gl_setpalettecolor(BACKGROUND, 0, 0, 0);
		gl_setpalettecolor(WIN_BACK, 44, 44, 44);
		gl_setpalettecolor(TITLE_BACK, 30, 30, 30);
		gl_setpalettecolor(TITLE_FORE, 48, 48, 48);
		gl_setpalettecolor(ACTIVE_TITLE_BACK, 0, 0, 28);
		gl_setpalettecolor(ACTIVE_TITLE_FORE, 63, 63, 63);
		gl_setpalettecolor(BUTTON_BACK, 52, 52, 52);
		gl_setpalettecolor(BUTTON_FORE, 0, 0, 0);
		gl_setpalettecolor(SLIDER_BACK, 48, 48, 48);
		gl_setpalettecolor(SLIDER_FORE, 54, 54, 54);
		gl_setpalettecolor(TEXT_EMBOSS, 24, 24, 24);
		gl_setpalettecolor(TEXT_NORMAL, 0, 0, 0);
		gl_setpalettecolor(INPUT_BACK, 42, 42, 42);
		gl_setpalettecolor(INPUT_FORE, 0, 0, 0);
		gl_setpalettecolor(ACTIVE_INPUT_BACK, 50, 50, 50);
		gl_setpalettecolor(BROWSER_BACK, 60, 60, 60);
		gl_setpalettecolor(BROWSER_FORE, 0, 0, 0);
		gl_setpalettecolor(INFO_BACK, 55, 55, 42);
		gl_setpalettecolor(INFO_FORE, 0, 0, 0);
		gl_setpalettecolor(CHOICE_BACK, 63, 63, 63);
		gl_setpalettecolor(CHOICE_FORE, 0, 0, 0);
		gl_setpalettecolor(LISTBOX_BACK, 63, 63, 63);
		gl_setpalettecolor(LISTBOX_FORE, 0, 0, 0);
		gl_setpalettecolor(NUMBER_FORE, 18, 32, 46);
		
		gl_setpalettecolor(BLACK, 0, 0, 0);
		gl_setpalettecolor(DARKGREY, 36, 36, 36);
		gl_setpalettecolor(GREY, 48, 48, 48);
		gl_setpalettecolor(LIGHTGREY, 54, 54, 54);
		gl_setpalettecolor(WHITE, 63, 63, 63);
		gl_setpalettecolor(DARKRED, 30, 0, 0);
		gl_setpalettecolor(RED, 58, 0, 0);
		gl_setpalettecolor(DARKBLUE, 0, 0, 32);
		gl_setpalettecolor(BLUE, 0, 0, 48);
		gl_setpalettecolor(LIGHTBLUE, 0, 32, 60);
		gl_setpalettecolor(DARKGREEN, 0, 30, 0);
		gl_setpalettecolor(GREEN, 21, 63, 21);
		gl_setpalettecolor(DARKYELLOW, 63, 47, 0);
		gl_setpalettecolor(YELLOW, 63, 63, 21);
	} else {
		gl_setpalettecolor(BACKGROUND, 0, 0, 0);
		gl_setpalettecolor(WIN_BACK, 44, 44, 44);
		gl_setpalettecolor(NUMBER_FORE, 18, 32, 46);
		gl_setpalettecolor(INFO_BACK, 55, 55, 42);

		gl_setpalettecolor(BLACK, 0, 0, 0);
		gl_setpalettecolor(DARKGREY, 30, 30, 30);
		gl_setpalettecolor(GREY, 48, 48, 48);
		gl_setpalettecolor(LIGHTGREY, 54, 54, 54);
		gl_setpalettecolor(WHITE, 63, 63, 63);
		gl_setpalettecolor(RED, 50, 0, 0);
		gl_setpalettecolor(BLUE, 0, 0, 28);
		gl_setpalettecolor(LIGHTBLUE, 0, 32, 60);
		gl_setpalettecolor(DARKGREEN, 0, 30, 0);
		gl_setpalettecolor(GREEN, 21, 63, 21);
		gl_setpalettecolor(YELLOW, 63, 55, 10);
	}
}


void open_svga_screen(int width, int height, int colors)
{
	int vgamode = -1;
	char hulp[80];

	vga_init();
	switch (colors) {
	case 16:
		if (width == 320 && height == 200)
			vgamode = G320x200x16;
		if (width == 640 && height == 200)
			vgamode = G640x200x16;
		if (width == 640 && height == 350)
			vgamode = G640x350x16;
		if (width == 640 && height == 480)
			vgamode = G640x480x16;
		break;
	case 256:
		if (width == 320 && height == 200)
			vgamode = G320x200x256;
		if (width == 640 && height == 480)
			vgamode = G640x480x256;
		if (width == 800 && height == 600)
			vgamode = G800x600x256;
		if (width == 1024 && height == 768)
			vgamode = G1024x768x256;
		break;
	default:
		error("Wrong number of colors specified (16 or 256)");
	}

	if (!vga_hasmode(vgamode)) {
		sprintf(hulp, "Mode %dx%dx%d not available", width, height, colors);
		error(hulp);
	}

	vga_setmode(vgamode);
	if (colors > 16) {
		gl_setcontextvga(vgamode);
		define_256_colors();
	} else
		define_16_colors();
	set_svga_default_palette(colors);

	/* Allocate memory for the screen image */
	if (guiscreen.data)
		free(guiscreen.data);
	guiscreen.data = (char *) malloc(width * height);
	if (guiscreen.data == NULL)
		error("Cannot allocate memory for screen operations in open_screen().");
	bzero(guiscreen.data, width * height);

	guiscreen.type = SVGALIB;
}


void close_svga_screen(void)
{
	if (guiscreen.type == SVGALIB)
		vga_setmode(TEXT);
}


void set_svga_palette(int color, int red, int green, int blue)
{
	gl_setpalettecolor(color, red, green, blue);
}


void get_svga_palette(int color, int *red, int *green, int *blue)
{
	gl_getpalettecolor(color, red, green, blue);
}


void switch_svga_cursor(int cursor_id)
{

}